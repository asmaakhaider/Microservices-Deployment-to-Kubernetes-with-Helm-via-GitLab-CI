image:
  name: "python:3.11-alpine"
  entrypoint: ["/bin/sh", "-c"]

stages:
  - test
  - build
  - run
  - deploy

test:
  stage: test
  image: python:latest
  before_script:
    # Afficher les informations du démon Docker (optionnel, utile pour le débogage)
    # - docker login registry.gitlab.com
    - apt-get update && apt-get install -y python3-pip
  script:
    - pip install fastapi
    - pip install pytest
    - pip install httpx
    - pip install jinja2
    # - cd gateway/ # Décommentez cette ligne si nécessaire pour naviguer dans le bon dossier
    #- python3 -m pytest


build_gateway:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    # Build the container image
    - docker build -t assma123/k-api-gateway:latest -f gateway/Dockerfile gateway
    # List the container images
    - docker image ls
    # Pousse l'image sur DockerHub
    - docker push assma123/k-api-gateway:latest
    - docker images  # Vérification que l'image est bien présente

run_gateway:
  stage: run
  image: docker:latest
  services:
    - docker:dind
  script:
   # Arrêter et supprimer le conteneur s'il existe déjà
    - docker stop containergateway || true
    - docker rm containergateway || true
    # Installer curl si nécessaire
    - apk add --no-cache curl
    # Exécuter le conteneur FastAPI en arrière-plan et le nommer 'containergateway'
    - docker run -d --name containergateway -p 8001:8000 assma123/k-api-gateway:latest
    # Augmenter le temps d'attente pour s'assurer que l'application démarre complètement
    - sleep 20
    # Vérifier les logs du conteneur pour diagnostiquer les problèmes
    - docker logs containergateway
    # Tester la connexion à l'application FastAPI
    - docker ps
    #- curl  http://localhost:8000
    # Arrêter le conteneur
    #- docker stop containergateway
    # Supprimer le conteneur
    #- docker rm containergateway

deploy_gateway:
  stage: deploy
  image: devth/helm:latest # Image contenant Helm
  services:
    - docker:dind
  script:
    - rm -Rf .kube
    - mkdir .kube
    - ls
    - cat $KUBE_CONFIG > .kube/config
    # Installer ou mettre à jour l'application avec Helm
    - helm upgrade --install gateway ./test-gateway/ -n prod --create-namespace
    # Vérifier le statut du déploiement Helm
    - helm list -n prod
    - kubectl get all -n prod 
